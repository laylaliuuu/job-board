////////////////////////////////////////////////////
// Users
////////////////////////////////////////////////////
Table users {
  id int [pk, increment] 
  first_name varchar
  last_name varchar
  email varchar [unique, not null]
  password_hash varchar [not null]
  role varchar // "job_seeker", "founder", "admin"
  created_at timestamp
  updated_at timestamp
}

////////////////////////////////////////////////////
// Companies
////////////////////////////////////////////////////
Table companies {
  id int [pk, increment]
  name varchar [not null]
  logo_url varchar
  description text
  stage varchar // e.g. "Seed", "Late Stage"
  industry varchar
  created_at timestamp
  updated_at timestamp
}

////////////////////////////////////////////////////
// Founders
////////////////////////////////////////////////////
Table founders {
  id int [pk, increment]
  user_id int [not null, unique, ref: > users.id] 
  company_id int [not null, ref: > companies.id]
  title varchar // "CEO", "Co-Founder"
  bio text
  created_at timestamp
  updated_at timestamp
}

////////////////////////////////////////////////////
// Jobs
////////////////////////////////////////////////////
Table jobs {
  id int [pk, increment]
  company_id int [not null, ref: > companies.id]
  title varchar [not null] // Product Designer, etc.
  description text
  location varchar // Remote, City
  country varchar
  job_type varchar // Full-time, Internship, Contract
  salary_min int
  salary_max int
  salary_currency varchar // USD, EUR
  posted_at timestamp
  level varchar // Entry Level, New Grad
  category varchar // Architecture, E-commerce
  created_at timestamp
  updated_at timestamp
}

////////////////////////////////////////////////////
// Applications
////////////////////////////////////////////////////
Table applications {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  job_id int [not null, ref: > jobs.id]
  status varchar // "applied", "interview", "offer", "rejected"
  applied_at timestamp
  Note: "Each user can only apply once per job"
  indexes {
    (user_id, job_id) [unique]
  }
}

////////////////////////////////////////////////////
// Matches
////////////////////////////////////////////////////
Table matches {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  job_id int [not null, ref: > jobs.id]
  score int // 0â€“100
  is_strong_match boolean
  created_at timestamp
}

////////////////////////////////////////////////////
// Chats & Messages
////////////////////////////////////////////////////
Table chats {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  founder_id int [not null, ref: > founders.id]
  created_at timestamp
}

Table messages {
  id int [pk, increment]
  chat_id int [not null, ref: > chats.id]
  sender_id int [not null, ref: > users.id] // or founder
  message text
  sent_at timestamp
}
